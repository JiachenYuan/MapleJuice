// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.15.8
// source: mp4_MJ.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Maple
type MapleWorkerListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumMaples        int32  `protobuf:"varint,1,opt,name=numMaples,proto3" json:"numMaples,omitempty"`
	SdfsSrcDirectory string `protobuf:"bytes,2,opt,name=sdfsSrcDirectory,proto3" json:"sdfsSrcDirectory,omitempty"`
}

func (x *MapleWorkerListRequest) Reset() {
	*x = MapleWorkerListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp4_MJ_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapleWorkerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapleWorkerListRequest) ProtoMessage() {}

func (x *MapleWorkerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mp4_MJ_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapleWorkerListRequest.ProtoReflect.Descriptor instead.
func (*MapleWorkerListRequest) Descriptor() ([]byte, []int) {
	return file_mp4_MJ_proto_rawDescGZIP(), []int{0}
}

func (x *MapleWorkerListRequest) GetNumMaples() int32 {
	if x != nil {
		return x.NumMaples
	}
	return 0
}

func (x *MapleWorkerListRequest) GetSdfsSrcDirectory() string {
	if x != nil {
		return x.SdfsSrcDirectory
	}
	return ""
}

type LineRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   int32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *LineRange) Reset() {
	*x = LineRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp4_MJ_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineRange) ProtoMessage() {}

func (x *LineRange) ProtoReflect() protoreflect.Message {
	mi := &file_mp4_MJ_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineRange.ProtoReflect.Descriptor instead.
func (*LineRange) Descriptor() ([]byte, []int) {
	return file_mp4_MJ_proto_rawDescGZIP(), []int{1}
}

func (x *LineRange) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *LineRange) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

type FileLines struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string     `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Range    *LineRange `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *FileLines) Reset() {
	*x = FileLines{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp4_MJ_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileLines) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileLines) ProtoMessage() {}

func (x *FileLines) ProtoReflect() protoreflect.Message {
	mi := &file_mp4_MJ_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileLines.ProtoReflect.Descriptor instead.
func (*FileLines) Descriptor() ([]byte, []int) {
	return file_mp4_MJ_proto_rawDescGZIP(), []int{2}
}

func (x *FileLines) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileLines) GetRange() *LineRange {
	if x != nil {
		return x.Range
	}
	return nil
}

type MapleWorkerListeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success     bool                                             `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Assignments []*MapleWorkerListeResponse_WorkerTaskAssignment `protobuf:"bytes,2,rep,name=assignments,proto3" json:"assignments,omitempty"`
}

func (x *MapleWorkerListeResponse) Reset() {
	*x = MapleWorkerListeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp4_MJ_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapleWorkerListeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapleWorkerListeResponse) ProtoMessage() {}

func (x *MapleWorkerListeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mp4_MJ_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapleWorkerListeResponse.ProtoReflect.Descriptor instead.
func (*MapleWorkerListeResponse) Descriptor() ([]byte, []int) {
	return file_mp4_MJ_proto_rawDescGZIP(), []int{3}
}

func (x *MapleWorkerListeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MapleWorkerListeResponse) GetAssignments() []*MapleWorkerListeResponse_WorkerTaskAssignment {
	if x != nil {
		return x.Assignments
	}
	return nil
}

type MapleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapleExePath                   string       `protobuf:"bytes,1,opt,name=mapleExePath,proto3" json:"mapleExePath,omitempty"`
	SdfsIntermediateFilenamePrefix string       `protobuf:"bytes,2,opt,name=sdfsIntermediateFilenamePrefix,proto3" json:"sdfsIntermediateFilenamePrefix,omitempty"`
	Files                          []*FileLines `protobuf:"bytes,3,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *MapleRequest) Reset() {
	*x = MapleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp4_MJ_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapleRequest) ProtoMessage() {}

func (x *MapleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mp4_MJ_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapleRequest.ProtoReflect.Descriptor instead.
func (*MapleRequest) Descriptor() ([]byte, []int) {
	return file_mp4_MJ_proto_rawDescGZIP(), []int{4}
}

func (x *MapleRequest) GetMapleExePath() string {
	if x != nil {
		return x.MapleExePath
	}
	return ""
}

func (x *MapleRequest) GetSdfsIntermediateFilenamePrefix() string {
	if x != nil {
		return x.SdfsIntermediateFilenamePrefix
	}
	return ""
}

func (x *MapleRequest) GetFiles() []*FileLines {
	if x != nil {
		return x.Files
	}
	return nil
}

type MapleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *MapleResponse) Reset() {
	*x = MapleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp4_MJ_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapleResponse) ProtoMessage() {}

func (x *MapleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mp4_MJ_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapleResponse.ProtoReflect.Descriptor instead.
func (*MapleResponse) Descriptor() ([]byte, []int) {
	return file_mp4_MJ_proto_rawDescGZIP(), []int{5}
}

func (x *MapleResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Juice
type JuiceWorkerListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumJuices int32 `protobuf:"varint,1,opt,name=numJuices,proto3" json:"numJuices,omitempty"`
}

func (x *JuiceWorkerListRequest) Reset() {
	*x = JuiceWorkerListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp4_MJ_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JuiceWorkerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JuiceWorkerListRequest) ProtoMessage() {}

func (x *JuiceWorkerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mp4_MJ_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JuiceWorkerListRequest.ProtoReflect.Descriptor instead.
func (*JuiceWorkerListRequest) Descriptor() ([]byte, []int) {
	return file_mp4_MJ_proto_rawDescGZIP(), []int{6}
}

func (x *JuiceWorkerListRequest) GetNumJuices() int32 {
	if x != nil {
		return x.NumJuices
	}
	return 0
}

type JuiceWorkerListeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerAddresses []string `protobuf:"bytes,1,rep,name=workerAddresses,proto3" json:"workerAddresses,omitempty"`
}

func (x *JuiceWorkerListeResponse) Reset() {
	*x = JuiceWorkerListeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp4_MJ_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JuiceWorkerListeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JuiceWorkerListeResponse) ProtoMessage() {}

func (x *JuiceWorkerListeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mp4_MJ_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JuiceWorkerListeResponse.ProtoReflect.Descriptor instead.
func (*JuiceWorkerListeResponse) Descriptor() ([]byte, []int) {
	return file_mp4_MJ_proto_rawDescGZIP(), []int{7}
}

func (x *JuiceWorkerListeResponse) GetWorkerAddresses() []string {
	if x != nil {
		return x.WorkerAddresses
	}
	return nil
}

type JuiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JuiceRequest) Reset() {
	*x = JuiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp4_MJ_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JuiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JuiceRequest) ProtoMessage() {}

func (x *JuiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mp4_MJ_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JuiceRequest.ProtoReflect.Descriptor instead.
func (*JuiceRequest) Descriptor() ([]byte, []int) {
	return file_mp4_MJ_proto_rawDescGZIP(), []int{8}
}

type JuiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *JuiceResponse) Reset() {
	*x = JuiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp4_MJ_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JuiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JuiceResponse) ProtoMessage() {}

func (x *JuiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mp4_MJ_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JuiceResponse.ProtoReflect.Descriptor instead.
func (*JuiceResponse) Descriptor() ([]byte, []int) {
	return file_mp4_MJ_proto_rawDescGZIP(), []int{9}
}

func (x *JuiceResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type MapleWorkerListeResponse_WorkerTaskAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerAddress string       `protobuf:"bytes,1,opt,name=workerAddress,proto3" json:"workerAddress,omitempty"`
	Files         []*FileLines `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *MapleWorkerListeResponse_WorkerTaskAssignment) Reset() {
	*x = MapleWorkerListeResponse_WorkerTaskAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp4_MJ_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapleWorkerListeResponse_WorkerTaskAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapleWorkerListeResponse_WorkerTaskAssignment) ProtoMessage() {}

func (x *MapleWorkerListeResponse_WorkerTaskAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_mp4_MJ_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapleWorkerListeResponse_WorkerTaskAssignment.ProtoReflect.Descriptor instead.
func (*MapleWorkerListeResponse_WorkerTaskAssignment) Descriptor() ([]byte, []int) {
	return file_mp4_MJ_proto_rawDescGZIP(), []int{3, 0}
}

func (x *MapleWorkerListeResponse_WorkerTaskAssignment) GetWorkerAddress() string {
	if x != nil {
		return x.WorkerAddress
	}
	return ""
}

func (x *MapleWorkerListeResponse_WorkerTaskAssignment) GetFiles() []*FileLines {
	if x != nil {
		return x.Files
	}
	return nil
}

var File_mp4_MJ_proto protoreflect.FileDescriptor

var file_mp4_MJ_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x70, 0x34, 0x5f, 0x4d, 0x4a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x33, 0x22, 0x62, 0x0a, 0x16, 0x4d, 0x61, 0x70,
	0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x6c, 0x65,
	0x73, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x64, 0x66, 0x73, 0x53, 0x72, 0x63, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x64, 0x66,
	0x73, 0x53, 0x72, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x33, 0x0a,
	0x09, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x22, 0x53, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x73, 0x34,
	0x32, 0x35, 0x5f, 0x6d, 0x70, 0x33, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x18, 0x4d, 0x61, 0x70, 0x6c,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5a,
	0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x33, 0x2e,
	0x4d, 0x61, 0x70, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x68, 0x0a, 0x14, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f,
	0x6d, 0x70, 0x33, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x05, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x6c, 0x65, 0x45, 0x78,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x70,
	0x6c, 0x65, 0x45, 0x78, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x46, 0x0a, 0x1e, 0x73, 0x64, 0x66,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1e, 0x73, 0x64, 0x66, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x2a, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x33, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x29, 0x0a,
	0x0d, 0x4d, 0x61, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x36, 0x0a, 0x16, 0x4a, 0x75, 0x69, 0x63,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x4a, 0x75, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x4a, 0x75, 0x69, 0x63, 0x65, 0x73,
	0x22, 0x44, 0x0a, 0x18, 0x4a, 0x75, 0x69, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x0e, 0x0a, 0x0c, 0x4a, 0x75, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x29, 0x0a, 0x0d, 0x4a, 0x75, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x32, 0xb3, 0x02, 0x0a, 0x0a, 0x4d, 0x61, 0x70, 0x6c, 0x65, 0x4a, 0x75, 0x69, 0x63, 0x65,
	0x12, 0x5e, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d,
	0x70, 0x33, 0x2e, 0x4d, 0x61, 0x70, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x73, 0x34, 0x32,
	0x35, 0x5f, 0x6d, 0x70, 0x33, 0x2e, 0x4d, 0x61, 0x70, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3c, 0x0a, 0x05, 0x4d, 0x61, 0x70, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x63, 0x73, 0x34, 0x32,
	0x35, 0x5f, 0x6d, 0x70, 0x33, 0x2e, 0x4d, 0x61, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x33, 0x2e, 0x4d,
	0x61, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49,
	0x0a, 0x12, 0x67, 0x65, 0x74, 0x4a, 0x75, 0x69, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x33,
	0x2e, 0x4a, 0x75, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x33, 0x2e, 0x4a, 0x75, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x05, 0x4a, 0x75, 0x69,
	0x63, 0x65, 0x12, 0x17, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x33, 0x2e, 0x4a,
	0x75, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x73,
	0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x33, 0x2e, 0x4a, 0x75, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mp4_MJ_proto_rawDescOnce sync.Once
	file_mp4_MJ_proto_rawDescData = file_mp4_MJ_proto_rawDesc
)

func file_mp4_MJ_proto_rawDescGZIP() []byte {
	file_mp4_MJ_proto_rawDescOnce.Do(func() {
		file_mp4_MJ_proto_rawDescData = protoimpl.X.CompressGZIP(file_mp4_MJ_proto_rawDescData)
	})
	return file_mp4_MJ_proto_rawDescData
}

var file_mp4_MJ_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_mp4_MJ_proto_goTypes = []interface{}{
	(*MapleWorkerListRequest)(nil),                        // 0: cs425_mp3.MapleWorkerListRequest
	(*LineRange)(nil),                                     // 1: cs425_mp3.LineRange
	(*FileLines)(nil),                                     // 2: cs425_mp3.FileLines
	(*MapleWorkerListeResponse)(nil),                      // 3: cs425_mp3.MapleWorkerListeResponse
	(*MapleRequest)(nil),                                  // 4: cs425_mp3.MapleRequest
	(*MapleResponse)(nil),                                 // 5: cs425_mp3.MapleResponse
	(*JuiceWorkerListRequest)(nil),                        // 6: cs425_mp3.JuiceWorkerListRequest
	(*JuiceWorkerListeResponse)(nil),                      // 7: cs425_mp3.JuiceWorkerListeResponse
	(*JuiceRequest)(nil),                                  // 8: cs425_mp3.JuiceRequest
	(*JuiceResponse)(nil),                                 // 9: cs425_mp3.JuiceResponse
	(*MapleWorkerListeResponse_WorkerTaskAssignment)(nil), // 10: cs425_mp3.MapleWorkerListeResponse.WorkerTaskAssignment
}
var file_mp4_MJ_proto_depIdxs = []int32{
	1,  // 0: cs425_mp3.FileLines.range:type_name -> cs425_mp3.LineRange
	10, // 1: cs425_mp3.MapleWorkerListeResponse.assignments:type_name -> cs425_mp3.MapleWorkerListeResponse.WorkerTaskAssignment
	2,  // 2: cs425_mp3.MapleRequest.files:type_name -> cs425_mp3.FileLines
	2,  // 3: cs425_mp3.MapleWorkerListeResponse.WorkerTaskAssignment.files:type_name -> cs425_mp3.FileLines
	0,  // 4: cs425_mp3.MapleJuice.getMapleWorkerList:input_type -> cs425_mp3.MapleWorkerListRequest
	4,  // 5: cs425_mp3.MapleJuice.Maple:input_type -> cs425_mp3.MapleRequest
	8,  // 6: cs425_mp3.MapleJuice.getJuiceWorkerList:input_type -> cs425_mp3.JuiceRequest
	8,  // 7: cs425_mp3.MapleJuice.Juice:input_type -> cs425_mp3.JuiceRequest
	3,  // 8: cs425_mp3.MapleJuice.getMapleWorkerList:output_type -> cs425_mp3.MapleWorkerListeResponse
	5,  // 9: cs425_mp3.MapleJuice.Maple:output_type -> cs425_mp3.MapleResponse
	9,  // 10: cs425_mp3.MapleJuice.getJuiceWorkerList:output_type -> cs425_mp3.JuiceResponse
	9,  // 11: cs425_mp3.MapleJuice.Juice:output_type -> cs425_mp3.JuiceResponse
	8,  // [8:12] is the sub-list for method output_type
	4,  // [4:8] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_mp4_MJ_proto_init() }
func file_mp4_MJ_proto_init() {
	if File_mp4_MJ_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mp4_MJ_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapleWorkerListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp4_MJ_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp4_MJ_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileLines); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp4_MJ_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapleWorkerListeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp4_MJ_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp4_MJ_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp4_MJ_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JuiceWorkerListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp4_MJ_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JuiceWorkerListeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp4_MJ_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JuiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp4_MJ_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JuiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp4_MJ_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapleWorkerListeResponse_WorkerTaskAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mp4_MJ_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mp4_MJ_proto_goTypes,
		DependencyIndexes: file_mp4_MJ_proto_depIdxs,
		MessageInfos:      file_mp4_MJ_proto_msgTypes,
	}.Build()
	File_mp4_MJ_proto = out.File
	file_mp4_MJ_proto_rawDesc = nil
	file_mp4_MJ_proto_goTypes = nil
	file_mp4_MJ_proto_depIdxs = nil
}

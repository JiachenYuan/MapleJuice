// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: mp3_leader_election.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeaderElectionClient is the client API for LeaderElection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaderElectionClient interface {
	// Gather vote from members
	RequestVotes(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	// HeartBeat between leader and followers
	HeartBeat(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
}

type leaderElectionClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaderElectionClient(cc grpc.ClientConnInterface) LeaderElectionClient {
	return &leaderElectionClient{cc}
}

func (c *leaderElectionClient) RequestVotes(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/cs425_mp3.LeaderElection/RequestVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderElectionClient) HeartBeat(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/cs425_mp3.LeaderElection/HeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaderElectionServer is the server API for LeaderElection service.
// All implementations must embed UnimplementedLeaderElectionServer
// for forward compatibility
type LeaderElectionServer interface {
	// Gather vote from members
	RequestVotes(context.Context, *VoteRequest) (*VoteResponse, error)
	// HeartBeat between leader and followers
	HeartBeat(context.Context, *Ping) (*Pong, error)
	mustEmbedUnimplementedLeaderElectionServer()
}

// UnimplementedLeaderElectionServer must be embedded to have forward compatible implementations.
type UnimplementedLeaderElectionServer struct {
}

func (UnimplementedLeaderElectionServer) RequestVotes(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVotes not implemented")
}
func (UnimplementedLeaderElectionServer) HeartBeat(context.Context, *Ping) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedLeaderElectionServer) mustEmbedUnimplementedLeaderElectionServer() {}

// UnsafeLeaderElectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaderElectionServer will
// result in compilation errors.
type UnsafeLeaderElectionServer interface {
	mustEmbedUnimplementedLeaderElectionServer()
}

func RegisterLeaderElectionServer(s grpc.ServiceRegistrar, srv LeaderElectionServer) {
	s.RegisterService(&LeaderElection_ServiceDesc, srv)
}

func _LeaderElection_RequestVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderElectionServer).RequestVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs425_mp3.LeaderElection/RequestVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderElectionServer).RequestVotes(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderElection_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderElectionServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs425_mp3.LeaderElection/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderElectionServer).HeartBeat(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaderElection_ServiceDesc is the grpc.ServiceDesc for LeaderElection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaderElection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cs425_mp3.LeaderElection",
	HandlerType: (*LeaderElectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVotes",
			Handler:    _LeaderElection_RequestVotes_Handler,
		},
		{
			MethodName: "HeartBeat",
			Handler:    _LeaderElection_HeartBeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mp3_leader_election.proto",
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.15.8
// source: mp2_group_message.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NodeInfoRow_NodeStatus int32

const (
	NodeInfoRow_Alive     NodeInfoRow_NodeStatus = 0
	NodeInfoRow_Suspected NodeInfoRow_NodeStatus = 1
	NodeInfoRow_Failed    NodeInfoRow_NodeStatus = 2 // TODO: might delete it since it should never be sent
	NodeInfoRow_Left      NodeInfoRow_NodeStatus = 3
)

// Enum value maps for NodeInfoRow_NodeStatus.
var (
	NodeInfoRow_NodeStatus_name = map[int32]string{
		0: "Alive",
		1: "Suspected",
		2: "Failed",
		3: "Left",
	}
	NodeInfoRow_NodeStatus_value = map[string]int32{
		"Alive":     0,
		"Suspected": 1,
		"Failed":    2,
		"Left":      3,
	}
)

func (x NodeInfoRow_NodeStatus) Enum() *NodeInfoRow_NodeStatus {
	p := new(NodeInfoRow_NodeStatus)
	*p = x
	return p
}

func (x NodeInfoRow_NodeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeInfoRow_NodeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mp2_group_message_proto_enumTypes[0].Descriptor()
}

func (NodeInfoRow_NodeStatus) Type() protoreflect.EnumType {
	return &file_mp2_group_message_proto_enumTypes[0]
}

func (x NodeInfoRow_NodeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeInfoRow_NodeStatus.Descriptor instead.
func (NodeInfoRow_NodeStatus) EnumDescriptor() ([]byte, []int) {
	return file_mp2_group_message_proto_rawDescGZIP(), []int{0, 0}
}

type GroupMessage_MessageType int32

const (
	GroupMessage_JOIN   GroupMessage_MessageType = 0
	GroupMessage_LEAVE  GroupMessage_MessageType = 1
	GroupMessage_GOSSIP GroupMessage_MessageType = 2
)

// Enum value maps for GroupMessage_MessageType.
var (
	GroupMessage_MessageType_name = map[int32]string{
		0: "JOIN",
		1: "LEAVE",
		2: "GOSSIP",
	}
	GroupMessage_MessageType_value = map[string]int32{
		"JOIN":   0,
		"LEAVE":  1,
		"GOSSIP": 2,
	}
)

func (x GroupMessage_MessageType) Enum() *GroupMessage_MessageType {
	p := new(GroupMessage_MessageType)
	*p = x
	return p
}

func (x GroupMessage_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupMessage_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_mp2_group_message_proto_enumTypes[1].Descriptor()
}

func (GroupMessage_MessageType) Type() protoreflect.EnumType {
	return &file_mp2_group_message_proto_enumTypes[1]
}

func (x GroupMessage_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupMessage_MessageType.Descriptor instead.
func (GroupMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_mp2_group_message_proto_rawDescGZIP(), []int{3, 0}
}

type NodeInfoRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeID string                 `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	SeqNum int32                  `protobuf:"varint,2,opt,name=seqNum,proto3" json:"seqNum,omitempty"`
	Status NodeInfoRow_NodeStatus `protobuf:"varint,3,opt,name=status,proto3,enum=cs425_mp2.NodeInfoRow_NodeStatus" json:"status,omitempty"`
}

func (x *NodeInfoRow) Reset() {
	*x = NodeInfoRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp2_group_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfoRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfoRow) ProtoMessage() {}

func (x *NodeInfoRow) ProtoReflect() protoreflect.Message {
	mi := &file_mp2_group_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfoRow.ProtoReflect.Descriptor instead.
func (*NodeInfoRow) Descriptor() ([]byte, []int) {
	return file_mp2_group_message_proto_rawDescGZIP(), []int{0}
}

func (x *NodeInfoRow) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *NodeInfoRow) GetSeqNum() int32 {
	if x != nil {
		return x.SeqNum
	}
	return 0
}

func (x *NodeInfoRow) GetStatus() NodeInfoRow_NodeStatus {
	if x != nil {
		return x.Status
	}
	return NodeInfoRow_Alive
}

type NodeInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows []*NodeInfoRow `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *NodeInfoList) Reset() {
	*x = NodeInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp2_group_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfoList) ProtoMessage() {}

func (x *NodeInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_mp2_group_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfoList.ProtoReflect.Descriptor instead.
func (*NodeInfoList) Descriptor() ([]byte, []int) {
	return file_mp2_group_message_proto_rawDescGZIP(), []int{1}
}

func (x *NodeInfoList) GetRows() []*NodeInfoRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

type LeaderState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version          int64                            `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	FileToVMMap      map[string]*LeaderState_AddrList `protobuf:"bytes,2,rep,name=FileToVMMap,proto3" json:"FileToVMMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VMToFileMap      map[string]*LeaderState_FileList `protobuf:"bytes,3,rep,name=VMToFileMap,proto3" json:"VMToFileMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FileLineCountMap map[string]int64                 `protobuf:"bytes,4,rep,name=FileLineCountMap,proto3" json:"FileLineCountMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FileLocks        map[string]*LeaderState_FileLock `protobuf:"bytes,5,rep,name=FileLocks,proto3" json:"FileLocks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LeaderState) Reset() {
	*x = LeaderState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp2_group_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderState) ProtoMessage() {}

func (x *LeaderState) ProtoReflect() protoreflect.Message {
	mi := &file_mp2_group_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderState.ProtoReflect.Descriptor instead.
func (*LeaderState) Descriptor() ([]byte, []int) {
	return file_mp2_group_message_proto_rawDescGZIP(), []int{2}
}

func (x *LeaderState) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *LeaderState) GetFileToVMMap() map[string]*LeaderState_AddrList {
	if x != nil {
		return x.FileToVMMap
	}
	return nil
}

func (x *LeaderState) GetVMToFileMap() map[string]*LeaderState_FileList {
	if x != nil {
		return x.VMToFileMap
	}
	return nil
}

func (x *LeaderState) GetFileLineCountMap() map[string]int64 {
	if x != nil {
		return x.FileLineCountMap
	}
	return nil
}

func (x *LeaderState) GetFileLocks() map[string]*LeaderState_FileLock {
	if x != nil {
		return x.FileLocks
	}
	return nil
}

type GroupMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         GroupMessage_MessageType `protobuf:"varint,1,opt,name=type,proto3,enum=cs425_mp2.GroupMessage_MessageType" json:"type,omitempty"`
	NodeInfoList *NodeInfoList            `protobuf:"bytes,2,opt,name=node_info_list,json=nodeInfoList,proto3" json:"node_info_list,omitempty"`
	LeaderState  *LeaderState             `protobuf:"bytes,3,opt,name=leader_state,json=leaderState,proto3,oneof" json:"leader_state,omitempty"` // Only make sense in MP3 for leader state replication.
}

func (x *GroupMessage) Reset() {
	*x = GroupMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp2_group_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMessage) ProtoMessage() {}

func (x *GroupMessage) ProtoReflect() protoreflect.Message {
	mi := &file_mp2_group_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMessage.ProtoReflect.Descriptor instead.
func (*GroupMessage) Descriptor() ([]byte, []int) {
	return file_mp2_group_message_proto_rawDescGZIP(), []int{3}
}

func (x *GroupMessage) GetType() GroupMessage_MessageType {
	if x != nil {
		return x.Type
	}
	return GroupMessage_JOIN
}

func (x *GroupMessage) GetNodeInfoList() *NodeInfoList {
	if x != nil {
		return x.NodeInfoList
	}
	return nil
}

func (x *GroupMessage) GetLeaderState() *LeaderState {
	if x != nil {
		return x.LeaderState
	}
	return nil
}

type LeaderStateReplicationPush struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderState *LeaderState `protobuf:"bytes,1,opt,name=leader_state,json=leaderState,proto3" json:"leader_state,omitempty"`
}

func (x *LeaderStateReplicationPush) Reset() {
	*x = LeaderStateReplicationPush{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp2_group_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderStateReplicationPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderStateReplicationPush) ProtoMessage() {}

func (x *LeaderStateReplicationPush) ProtoReflect() protoreflect.Message {
	mi := &file_mp2_group_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderStateReplicationPush.ProtoReflect.Descriptor instead.
func (*LeaderStateReplicationPush) Descriptor() ([]byte, []int) {
	return file_mp2_group_message_proto_rawDescGZIP(), []int{4}
}

func (x *LeaderStateReplicationPush) GetLeaderState() *LeaderState {
	if x != nil {
		return x.LeaderState
	}
	return nil
}

type LeaderStateReplicationAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Received bool `protobuf:"varint,1,opt,name=received,proto3" json:"received,omitempty"`
}

func (x *LeaderStateReplicationAck) Reset() {
	*x = LeaderStateReplicationAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp2_group_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderStateReplicationAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderStateReplicationAck) ProtoMessage() {}

func (x *LeaderStateReplicationAck) ProtoReflect() protoreflect.Message {
	mi := &file_mp2_group_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderStateReplicationAck.ProtoReflect.Descriptor instead.
func (*LeaderStateReplicationAck) Descriptor() ([]byte, []int) {
	return file_mp2_group_message_proto_rawDescGZIP(), []int{5}
}

func (x *LeaderStateReplicationAck) GetReceived() bool {
	if x != nil {
		return x.Received
	}
	return false
}

type LeaderState_AddrList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VMAddr []string `protobuf:"bytes,1,rep,name=VM_addr,json=VMAddr,proto3" json:"VM_addr,omitempty"`
}

func (x *LeaderState_AddrList) Reset() {
	*x = LeaderState_AddrList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp2_group_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderState_AddrList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderState_AddrList) ProtoMessage() {}

func (x *LeaderState_AddrList) ProtoReflect() protoreflect.Message {
	mi := &file_mp2_group_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderState_AddrList.ProtoReflect.Descriptor instead.
func (*LeaderState_AddrList) Descriptor() ([]byte, []int) {
	return file_mp2_group_message_proto_rawDescGZIP(), []int{2, 0}
}

func (x *LeaderState_AddrList) GetVMAddr() []string {
	if x != nil {
		return x.VMAddr
	}
	return nil
}

type LeaderState_FileList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileNames []string `protobuf:"bytes,1,rep,name=file_names,json=fileNames,proto3" json:"file_names,omitempty"`
}

func (x *LeaderState_FileList) Reset() {
	*x = LeaderState_FileList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp2_group_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderState_FileList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderState_FileList) ProtoMessage() {}

func (x *LeaderState_FileList) ProtoReflect() protoreflect.Message {
	mi := &file_mp2_group_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderState_FileList.ProtoReflect.Descriptor instead.
func (*LeaderState_FileList) Descriptor() ([]byte, []int) {
	return file_mp2_group_message_proto_rawDescGZIP(), []int{2, 1}
}

func (x *LeaderState_FileList) GetFileNames() []string {
	if x != nil {
		return x.FileNames
	}
	return nil
}

type LeaderState_FileLock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadQueue         []string `protobuf:"bytes,1,rep,name=ReadQueue,proto3" json:"ReadQueue,omitempty"`
	WriteQueue        []string `protobuf:"bytes,2,rep,name=WriteQueue,proto3" json:"WriteQueue,omitempty"`
	ReadCount         int32    `protobuf:"varint,3,opt,name=ReadCount,proto3" json:"ReadCount,omitempty"`
	WriteCount        int32    `protobuf:"varint,4,opt,name=WriteCount,proto3" json:"WriteCount,omitempty"`
	ConsecutiveReads  int32    `protobuf:"varint,5,opt,name=ConsecutiveReads,proto3" json:"ConsecutiveReads,omitempty"`
	ConsecutiveWrites int32    `protobuf:"varint,6,opt,name=ConsecutiveWrites,proto3" json:"ConsecutiveWrites,omitempty"`
}

func (x *LeaderState_FileLock) Reset() {
	*x = LeaderState_FileLock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp2_group_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderState_FileLock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderState_FileLock) ProtoMessage() {}

func (x *LeaderState_FileLock) ProtoReflect() protoreflect.Message {
	mi := &file_mp2_group_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderState_FileLock.ProtoReflect.Descriptor instead.
func (*LeaderState_FileLock) Descriptor() ([]byte, []int) {
	return file_mp2_group_message_proto_rawDescGZIP(), []int{2, 2}
}

func (x *LeaderState_FileLock) GetReadQueue() []string {
	if x != nil {
		return x.ReadQueue
	}
	return nil
}

func (x *LeaderState_FileLock) GetWriteQueue() []string {
	if x != nil {
		return x.WriteQueue
	}
	return nil
}

func (x *LeaderState_FileLock) GetReadCount() int32 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *LeaderState_FileLock) GetWriteCount() int32 {
	if x != nil {
		return x.WriteCount
	}
	return 0
}

func (x *LeaderState_FileLock) GetConsecutiveReads() int32 {
	if x != nil {
		return x.ConsecutiveReads
	}
	return 0
}

func (x *LeaderState_FileLock) GetConsecutiveWrites() int32 {
	if x != nil {
		return x.ConsecutiveWrites
	}
	return 0
}

var File_mp2_group_message_proto protoreflect.FileDescriptor

var file_mp2_group_message_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6d, 0x70, 0x32, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x73, 0x34, 0x32, 0x35,
	0x5f, 0x6d, 0x70, 0x32, 0x22, 0xb6, 0x01, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65,
	0x71, 0x4e, 0x75, 0x6d, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x32,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x6f, 0x77, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x3c, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a,
	0x05, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x75, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x03, 0x22, 0x3a, 0x0a,
	0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x73,
	0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x32, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0xf5, 0x07, 0x0a, 0x0b, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x56, 0x4d, 0x4d,
	0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35,
	0x5f, 0x6d, 0x70, 0x32, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x56, 0x4d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x56, 0x4d, 0x4d, 0x61, 0x70, 0x12, 0x49,
	0x0a, 0x0b, 0x56, 0x4d, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x32, 0x2e,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x4d, 0x54, 0x6f,
	0x46, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x56, 0x4d,
	0x54, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x58, 0x0a, 0x10, 0x46, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x32, 0x2e,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x12, 0x43, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d,
	0x70, 0x32, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x46,
	0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x1a, 0x23, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x56, 0x4d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x56, 0x4d, 0x41, 0x64, 0x64, 0x72, 0x1a, 0x29, 0x0a,
	0x08, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0xe0, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x61, 0x64, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x72, 0x69, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x57, 0x72, 0x69, 0x74, 0x65, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x61, 0x64, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x76, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x1a, 0x5f, 0x0a, 0x10, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x6f, 0x56, 0x4d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x32, 0x2e, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x10,
	0x56, 0x4d, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x32, 0x2e, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a,
	0x15, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x5d, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70,
	0x32, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x87, 0x02, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x32, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x32, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x32, 0x2e, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x22, 0x2e, 0x0a, 0x0b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x4f, 0x49,
	0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x47, 0x4f, 0x53, 0x53, 0x49, 0x50, 0x10, 0x02, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x57, 0x0a, 0x1a, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x73, 0x68, 0x12, 0x39, 0x0a, 0x0c, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x32, 0x2e, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x37, 0x0a, 0x19, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x32, 0x78, 0x0a,
	0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x12, 0x65, 0x0a, 0x14, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35,
	0x5f, 0x6d, 0x70, 0x32, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x73, 0x68, 0x1a,
	0x24, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x32, 0x2e, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mp2_group_message_proto_rawDescOnce sync.Once
	file_mp2_group_message_proto_rawDescData = file_mp2_group_message_proto_rawDesc
)

func file_mp2_group_message_proto_rawDescGZIP() []byte {
	file_mp2_group_message_proto_rawDescOnce.Do(func() {
		file_mp2_group_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_mp2_group_message_proto_rawDescData)
	})
	return file_mp2_group_message_proto_rawDescData
}

var file_mp2_group_message_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_mp2_group_message_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_mp2_group_message_proto_goTypes = []interface{}{
	(NodeInfoRow_NodeStatus)(0),        // 0: cs425_mp2.NodeInfoRow.NodeStatus
	(GroupMessage_MessageType)(0),      // 1: cs425_mp2.GroupMessage.MessageType
	(*NodeInfoRow)(nil),                // 2: cs425_mp2.NodeInfoRow
	(*NodeInfoList)(nil),               // 3: cs425_mp2.NodeInfoList
	(*LeaderState)(nil),                // 4: cs425_mp2.LeaderState
	(*GroupMessage)(nil),               // 5: cs425_mp2.GroupMessage
	(*LeaderStateReplicationPush)(nil), // 6: cs425_mp2.LeaderStateReplicationPush
	(*LeaderStateReplicationAck)(nil),  // 7: cs425_mp2.LeaderStateReplicationAck
	(*LeaderState_AddrList)(nil),       // 8: cs425_mp2.LeaderState.AddrList
	(*LeaderState_FileList)(nil),       // 9: cs425_mp2.LeaderState.FileList
	(*LeaderState_FileLock)(nil),       // 10: cs425_mp2.LeaderState.FileLock
	nil,                                // 11: cs425_mp2.LeaderState.FileToVMMapEntry
	nil,                                // 12: cs425_mp2.LeaderState.VMToFileMapEntry
	nil,                                // 13: cs425_mp2.LeaderState.FileLineCountMapEntry
	nil,                                // 14: cs425_mp2.LeaderState.FileLocksEntry
}
var file_mp2_group_message_proto_depIdxs = []int32{
	0,  // 0: cs425_mp2.NodeInfoRow.status:type_name -> cs425_mp2.NodeInfoRow.NodeStatus
	2,  // 1: cs425_mp2.NodeInfoList.rows:type_name -> cs425_mp2.NodeInfoRow
	11, // 2: cs425_mp2.LeaderState.FileToVMMap:type_name -> cs425_mp2.LeaderState.FileToVMMapEntry
	12, // 3: cs425_mp2.LeaderState.VMToFileMap:type_name -> cs425_mp2.LeaderState.VMToFileMapEntry
	13, // 4: cs425_mp2.LeaderState.FileLineCountMap:type_name -> cs425_mp2.LeaderState.FileLineCountMapEntry
	14, // 5: cs425_mp2.LeaderState.FileLocks:type_name -> cs425_mp2.LeaderState.FileLocksEntry
	1,  // 6: cs425_mp2.GroupMessage.type:type_name -> cs425_mp2.GroupMessage.MessageType
	3,  // 7: cs425_mp2.GroupMessage.node_info_list:type_name -> cs425_mp2.NodeInfoList
	4,  // 8: cs425_mp2.GroupMessage.leader_state:type_name -> cs425_mp2.LeaderState
	4,  // 9: cs425_mp2.LeaderStateReplicationPush.leader_state:type_name -> cs425_mp2.LeaderState
	8,  // 10: cs425_mp2.LeaderState.FileToVMMapEntry.value:type_name -> cs425_mp2.LeaderState.AddrList
	9,  // 11: cs425_mp2.LeaderState.VMToFileMapEntry.value:type_name -> cs425_mp2.LeaderState.FileList
	10, // 12: cs425_mp2.LeaderState.FileLocksEntry.value:type_name -> cs425_mp2.LeaderState.FileLock
	6,  // 13: cs425_mp2.GroupMembership.LeaderStateBroadcast:input_type -> cs425_mp2.LeaderStateReplicationPush
	7,  // 14: cs425_mp2.GroupMembership.LeaderStateBroadcast:output_type -> cs425_mp2.LeaderStateReplicationAck
	14, // [14:15] is the sub-list for method output_type
	13, // [13:14] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_mp2_group_message_proto_init() }
func file_mp2_group_message_proto_init() {
	if File_mp2_group_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mp2_group_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfoRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp2_group_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp2_group_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp2_group_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp2_group_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderStateReplicationPush); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp2_group_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderStateReplicationAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp2_group_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderState_AddrList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp2_group_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderState_FileList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp2_group_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderState_FileLock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mp2_group_message_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mp2_group_message_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mp2_group_message_proto_goTypes,
		DependencyIndexes: file_mp2_group_message_proto_depIdxs,
		EnumInfos:         file_mp2_group_message_proto_enumTypes,
		MessageInfos:      file_mp2_group_message_proto_msgTypes,
	}.Build()
	File_mp2_group_message_proto = out.File
	file_mp2_group_message_proto_rawDesc = nil
	file_mp2_group_message_proto_goTypes = nil
	file_mp2_group_message_proto_depIdxs = nil
}

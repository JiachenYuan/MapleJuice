// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: mp2_group_message.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GroupMembershipClient is the client API for GroupMembership service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupMembershipClient interface {
	// HeartBeat between leader and followers
	LeaderStateBroadcast(ctx context.Context, in *LeaderStateReplicationPush, opts ...grpc.CallOption) (*LeaderStateReplicationAck, error)
}

type groupMembershipClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupMembershipClient(cc grpc.ClientConnInterface) GroupMembershipClient {
	return &groupMembershipClient{cc}
}

func (c *groupMembershipClient) LeaderStateBroadcast(ctx context.Context, in *LeaderStateReplicationPush, opts ...grpc.CallOption) (*LeaderStateReplicationAck, error) {
	out := new(LeaderStateReplicationAck)
	err := c.cc.Invoke(ctx, "/cs425_mp2.GroupMembership/LeaderStateBroadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupMembershipServer is the server API for GroupMembership service.
// All implementations must embed UnimplementedGroupMembershipServer
// for forward compatibility
type GroupMembershipServer interface {
	// HeartBeat between leader and followers
	LeaderStateBroadcast(context.Context, *LeaderStateReplicationPush) (*LeaderStateReplicationAck, error)
	mustEmbedUnimplementedGroupMembershipServer()
}

// UnimplementedGroupMembershipServer must be embedded to have forward compatible implementations.
type UnimplementedGroupMembershipServer struct {
}

func (UnimplementedGroupMembershipServer) LeaderStateBroadcast(context.Context, *LeaderStateReplicationPush) (*LeaderStateReplicationAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaderStateBroadcast not implemented")
}
func (UnimplementedGroupMembershipServer) mustEmbedUnimplementedGroupMembershipServer() {}

// UnsafeGroupMembershipServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupMembershipServer will
// result in compilation errors.
type UnsafeGroupMembershipServer interface {
	mustEmbedUnimplementedGroupMembershipServer()
}

func RegisterGroupMembershipServer(s grpc.ServiceRegistrar, srv GroupMembershipServer) {
	s.RegisterService(&GroupMembership_ServiceDesc, srv)
}

func _GroupMembership_LeaderStateBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderStateReplicationPush)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupMembershipServer).LeaderStateBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs425_mp2.GroupMembership/LeaderStateBroadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupMembershipServer).LeaderStateBroadcast(ctx, req.(*LeaderStateReplicationPush))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupMembership_ServiceDesc is the grpc.ServiceDesc for GroupMembership service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupMembership_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cs425_mp2.GroupMembership",
	HandlerType: (*GroupMembershipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LeaderStateBroadcast",
			Handler:    _GroupMembership_LeaderStateBroadcast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mp2_group_message.proto",
}

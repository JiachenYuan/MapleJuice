// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: mp4_MJ.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MapleJuiceClient is the client API for MapleJuice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MapleJuiceClient interface {
	GetMapleWorkerList(ctx context.Context, in *MapleWorkerListRequest, opts ...grpc.CallOption) (*MapleWorkerListeResponse, error)
	Maple(ctx context.Context, in *MapleRequest, opts ...grpc.CallOption) (*MapleResponse, error)
	GetJuiceWorkerList(ctx context.Context, in *JuiceRequest, opts ...grpc.CallOption) (*JuiceResponse, error)
	Juice(ctx context.Context, in *JuiceRequest, opts ...grpc.CallOption) (*JuiceResponse, error)
	JuiceExec(ctx context.Context, in *JuiceExecRequest, opts ...grpc.CallOption) (*JuiceExecResponse, error)
}

type mapleJuiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMapleJuiceClient(cc grpc.ClientConnInterface) MapleJuiceClient {
	return &mapleJuiceClient{cc}
}

func (c *mapleJuiceClient) GetMapleWorkerList(ctx context.Context, in *MapleWorkerListRequest, opts ...grpc.CallOption) (*MapleWorkerListeResponse, error) {
	out := new(MapleWorkerListeResponse)
	err := c.cc.Invoke(ctx, "/cs425_mp3.MapleJuice/getMapleWorkerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapleJuiceClient) Maple(ctx context.Context, in *MapleRequest, opts ...grpc.CallOption) (*MapleResponse, error) {
	out := new(MapleResponse)
	err := c.cc.Invoke(ctx, "/cs425_mp3.MapleJuice/Maple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapleJuiceClient) GetJuiceWorkerList(ctx context.Context, in *JuiceRequest, opts ...grpc.CallOption) (*JuiceResponse, error) {
	out := new(JuiceResponse)
	err := c.cc.Invoke(ctx, "/cs425_mp3.MapleJuice/getJuiceWorkerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapleJuiceClient) Juice(ctx context.Context, in *JuiceRequest, opts ...grpc.CallOption) (*JuiceResponse, error) {
	out := new(JuiceResponse)
	err := c.cc.Invoke(ctx, "/cs425_mp3.MapleJuice/Juice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapleJuiceClient) JuiceExec(ctx context.Context, in *JuiceExecRequest, opts ...grpc.CallOption) (*JuiceExecResponse, error) {
	out := new(JuiceExecResponse)
	err := c.cc.Invoke(ctx, "/cs425_mp3.MapleJuice/JuiceExec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapleJuiceServer is the server API for MapleJuice service.
// All implementations must embed UnimplementedMapleJuiceServer
// for forward compatibility
type MapleJuiceServer interface {
	GetMapleWorkerList(context.Context, *MapleWorkerListRequest) (*MapleWorkerListeResponse, error)
	Maple(context.Context, *MapleRequest) (*MapleResponse, error)
	GetJuiceWorkerList(context.Context, *JuiceRequest) (*JuiceResponse, error)
	Juice(context.Context, *JuiceRequest) (*JuiceResponse, error)
	JuiceExec(context.Context, *JuiceExecRequest) (*JuiceExecResponse, error)
	mustEmbedUnimplementedMapleJuiceServer()
}

// UnimplementedMapleJuiceServer must be embedded to have forward compatible implementations.
type UnimplementedMapleJuiceServer struct {
}

func (UnimplementedMapleJuiceServer) GetMapleWorkerList(context.Context, *MapleWorkerListRequest) (*MapleWorkerListeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapleWorkerList not implemented")
}
func (UnimplementedMapleJuiceServer) Maple(context.Context, *MapleRequest) (*MapleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Maple not implemented")
}
func (UnimplementedMapleJuiceServer) GetJuiceWorkerList(context.Context, *JuiceRequest) (*JuiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJuiceWorkerList not implemented")
}
func (UnimplementedMapleJuiceServer) Juice(context.Context, *JuiceRequest) (*JuiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Juice not implemented")
}
func (UnimplementedMapleJuiceServer) JuiceExec(context.Context, *JuiceExecRequest) (*JuiceExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JuiceExec not implemented")
}
func (UnimplementedMapleJuiceServer) mustEmbedUnimplementedMapleJuiceServer() {}

// UnsafeMapleJuiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MapleJuiceServer will
// result in compilation errors.
type UnsafeMapleJuiceServer interface {
	mustEmbedUnimplementedMapleJuiceServer()
}

func RegisterMapleJuiceServer(s grpc.ServiceRegistrar, srv MapleJuiceServer) {
	s.RegisterService(&MapleJuice_ServiceDesc, srv)
}

func _MapleJuice_GetMapleWorkerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapleWorkerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapleJuiceServer).GetMapleWorkerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs425_mp3.MapleJuice/getMapleWorkerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapleJuiceServer).GetMapleWorkerList(ctx, req.(*MapleWorkerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapleJuice_Maple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapleJuiceServer).Maple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs425_mp3.MapleJuice/Maple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapleJuiceServer).Maple(ctx, req.(*MapleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapleJuice_GetJuiceWorkerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JuiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapleJuiceServer).GetJuiceWorkerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs425_mp3.MapleJuice/getJuiceWorkerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapleJuiceServer).GetJuiceWorkerList(ctx, req.(*JuiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapleJuice_Juice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JuiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapleJuiceServer).Juice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs425_mp3.MapleJuice/Juice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapleJuiceServer).Juice(ctx, req.(*JuiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapleJuice_JuiceExec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JuiceExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapleJuiceServer).JuiceExec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs425_mp3.MapleJuice/JuiceExec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapleJuiceServer).JuiceExec(ctx, req.(*JuiceExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MapleJuice_ServiceDesc is the grpc.ServiceDesc for MapleJuice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MapleJuice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cs425_mp3.MapleJuice",
	HandlerType: (*MapleJuiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getMapleWorkerList",
			Handler:    _MapleJuice_GetMapleWorkerList_Handler,
		},
		{
			MethodName: "Maple",
			Handler:    _MapleJuice_Maple_Handler,
		},
		{
			MethodName: "getJuiceWorkerList",
			Handler:    _MapleJuice_GetJuiceWorkerList_Handler,
		},
		{
			MethodName: "Juice",
			Handler:    _MapleJuice_Juice_Handler,
		},
		{
			MethodName: "JuiceExec",
			Handler:    _MapleJuice_JuiceExec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mp4_MJ.proto",
}

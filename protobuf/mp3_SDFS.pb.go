// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.15.8
// source: mp3_SDFS.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Get
type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp3_SDFS_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_SDFS_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_mp3_SDFS_proto_rawDescGZIP(), []int{0}
}

func (x *GetRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success     bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	VMAddresses []string `protobuf:"bytes,2,rep,name=VMAddresses,proto3" json:"VMAddresses,omitempty"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp3_SDFS_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_SDFS_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_mp3_SDFS_proto_rawDescGZIP(), []int{1}
}

func (x *GetResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetResponse) GetVMAddresses() []string {
	if x != nil {
		return x.VMAddresses
	}
	return nil
}

// Put
type PutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
}

func (x *PutRequest) Reset() {
	*x = PutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp3_SDFS_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutRequest) ProtoMessage() {}

func (x *PutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_SDFS_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutRequest.ProtoReflect.Descriptor instead.
func (*PutRequest) Descriptor() ([]byte, []int) {
	return file_mp3_SDFS_proto_rawDescGZIP(), []int{2}
}

func (x *PutRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type PutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success     bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	VMAddresses []string `protobuf:"bytes,2,rep,name=VMAddresses,proto3" json:"VMAddresses,omitempty"`
}

func (x *PutResponse) Reset() {
	*x = PutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp3_SDFS_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutResponse) ProtoMessage() {}

func (x *PutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_SDFS_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutResponse.ProtoReflect.Descriptor instead.
func (*PutResponse) Descriptor() ([]byte, []int) {
	return file_mp3_SDFS_proto_rawDescGZIP(), []int{3}
}

func (x *PutResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PutResponse) GetVMAddresses() []string {
	if x != nil {
		return x.VMAddresses
	}
	return nil
}

// update leader file table request
type UpdateLeaderFileTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName         string   `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	ReplicaAddresses []string `protobuf:"bytes,2,rep,name=replicaAddresses,proto3" json:"replicaAddresses,omitempty"`
}

func (x *UpdateLeaderFileTableRequest) Reset() {
	*x = UpdateLeaderFileTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp3_SDFS_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLeaderFileTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLeaderFileTableRequest) ProtoMessage() {}

func (x *UpdateLeaderFileTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_SDFS_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLeaderFileTableRequest.ProtoReflect.Descriptor instead.
func (*UpdateLeaderFileTableRequest) Descriptor() ([]byte, []int) {
	return file_mp3_SDFS_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateLeaderFileTableRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *UpdateLeaderFileTableRequest) GetReplicaAddresses() []string {
	if x != nil {
		return x.ReplicaAddresses
	}
	return nil
}

type UpdateLeaderFileTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpdateLeaderFileTableResponse) Reset() {
	*x = UpdateLeaderFileTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp3_SDFS_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLeaderFileTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLeaderFileTableResponse) ProtoMessage() {}

func (x *UpdateLeaderFileTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_SDFS_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLeaderFileTableResponse.ProtoReflect.Descriptor instead.
func (*UpdateLeaderFileTableResponse) Descriptor() ([]byte, []int) {
	return file_mp3_SDFS_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateLeaderFileTableResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Delete (sent to leader)
type DeleteRequestLeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
}

func (x *DeleteRequestLeader) Reset() {
	*x = DeleteRequestLeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp3_SDFS_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequestLeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequestLeader) ProtoMessage() {}

func (x *DeleteRequestLeader) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_SDFS_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequestLeader.ProtoReflect.Descriptor instead.
func (*DeleteRequestLeader) Descriptor() ([]byte, []int) {
	return file_mp3_SDFS_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteRequestLeader) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type DeleteResponseLeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteResponseLeader) Reset() {
	*x = DeleteResponseLeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp3_SDFS_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponseLeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponseLeader) ProtoMessage() {}

func (x *DeleteResponseLeader) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_SDFS_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponseLeader.ProtoReflect.Descriptor instead.
func (*DeleteResponseLeader) Descriptor() ([]byte, []int) {
	return file_mp3_SDFS_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteResponseLeader) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Delete (sent to followers)
type DeleteRequestFollower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName      string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	SenderAddress string `protobuf:"bytes,2,opt,name=senderAddress,proto3" json:"senderAddress,omitempty"`
}

func (x *DeleteRequestFollower) Reset() {
	*x = DeleteRequestFollower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp3_SDFS_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequestFollower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequestFollower) ProtoMessage() {}

func (x *DeleteRequestFollower) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_SDFS_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequestFollower.ProtoReflect.Descriptor instead.
func (*DeleteRequestFollower) Descriptor() ([]byte, []int) {
	return file_mp3_SDFS_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteRequestFollower) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *DeleteRequestFollower) GetSenderAddress() string {
	if x != nil {
		return x.SenderAddress
	}
	return ""
}

type DeleteResponseFollower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteResponseFollower) Reset() {
	*x = DeleteResponseFollower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp3_SDFS_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponseFollower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponseFollower) ProtoMessage() {}

func (x *DeleteResponseFollower) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_SDFS_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponseFollower.ProtoReflect.Descriptor instead.
func (*DeleteResponseFollower) Descriptor() ([]byte, []int) {
	return file_mp3_SDFS_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteResponseFollower) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// list file holder (ls)
type ListFileHolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
}

func (x *ListFileHolderRequest) Reset() {
	*x = ListFileHolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp3_SDFS_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFileHolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFileHolderRequest) ProtoMessage() {}

func (x *ListFileHolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_SDFS_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFileHolderRequest.ProtoReflect.Descriptor instead.
func (*ListFileHolderRequest) Descriptor() ([]byte, []int) {
	return file_mp3_SDFS_proto_rawDescGZIP(), []int{10}
}

func (x *ListFileHolderRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type ListFileHolderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success     bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	VMAddresses []string `protobuf:"bytes,2,rep,name=VMAddresses,proto3" json:"VMAddresses,omitempty"`
}

func (x *ListFileHolderResponse) Reset() {
	*x = ListFileHolderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp3_SDFS_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFileHolderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFileHolderResponse) ProtoMessage() {}

func (x *ListFileHolderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_SDFS_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFileHolderResponse.ProtoReflect.Descriptor instead.
func (*ListFileHolderResponse) Descriptor() ([]byte, []int) {
	return file_mp3_SDFS_proto_rawDescGZIP(), []int{11}
}

func (x *ListFileHolderResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ListFileHolderResponse) GetVMAddresses() []string {
	if x != nil {
		return x.VMAddresses
	}
	return nil
}

// list local files (store)
type ListLocalFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderAddress string `protobuf:"bytes,1,opt,name=senderAddress,proto3" json:"senderAddress,omitempty"`
}

func (x *ListLocalFilesRequest) Reset() {
	*x = ListLocalFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp3_SDFS_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLocalFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLocalFilesRequest) ProtoMessage() {}

func (x *ListLocalFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_SDFS_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLocalFilesRequest.ProtoReflect.Descriptor instead.
func (*ListLocalFilesRequest) Descriptor() ([]byte, []int) {
	return file_mp3_SDFS_proto_rawDescGZIP(), []int{12}
}

func (x *ListLocalFilesRequest) GetSenderAddress() string {
	if x != nil {
		return x.SenderAddress
	}
	return ""
}

type ListLocalFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	FileNames []string `protobuf:"bytes,2,rep,name=fileNames,proto3" json:"fileNames,omitempty"`
}

func (x *ListLocalFilesResponse) Reset() {
	*x = ListLocalFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp3_SDFS_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLocalFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLocalFilesResponse) ProtoMessage() {}

func (x *ListLocalFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_SDFS_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLocalFilesResponse.ProtoReflect.Descriptor instead.
func (*ListLocalFilesResponse) Descriptor() ([]byte, []int) {
	return file_mp3_SDFS_proto_rawDescGZIP(), []int{13}
}

func (x *ListLocalFilesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ListLocalFilesResponse) GetFileNames() []string {
	if x != nil {
		return x.FileNames
	}
	return nil
}

// Replicate
type ReplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName        string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	SenderMachine   string `protobuf:"bytes,2,opt,name=senderMachine,proto3" json:"senderMachine,omitempty"`
	ReceiverMachine string `protobuf:"bytes,3,opt,name=receiverMachine,proto3" json:"receiverMachine,omitempty"`
}

func (x *ReplicationRequest) Reset() {
	*x = ReplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp3_SDFS_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationRequest) ProtoMessage() {}

func (x *ReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_SDFS_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationRequest.ProtoReflect.Descriptor instead.
func (*ReplicationRequest) Descriptor() ([]byte, []int) {
	return file_mp3_SDFS_proto_rawDescGZIP(), []int{14}
}

func (x *ReplicationRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *ReplicationRequest) GetSenderMachine() string {
	if x != nil {
		return x.SenderMachine
	}
	return ""
}

func (x *ReplicationRequest) GetReceiverMachine() string {
	if x != nil {
		return x.ReceiverMachine
	}
	return ""
}

type ReplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ReplicationResponse) Reset() {
	*x = ReplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mp3_SDFS_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationResponse) ProtoMessage() {}

func (x *ReplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_SDFS_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationResponse.ProtoReflect.Descriptor instead.
func (*ReplicationResponse) Descriptor() ([]byte, []int) {
	return file_mp3_SDFS_proto_rawDescGZIP(), []int{15}
}

func (x *ReplicationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_mp3_SDFS_proto protoreflect.FileDescriptor

var file_mp3_SDFS_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6d, 0x70, 0x33, 0x5f, 0x53, 0x44, 0x46, 0x53, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x09, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x33, 0x22, 0x28, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x49, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x56, 0x4d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x56, 0x4d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x22, 0x28, 0x0a, 0x0a, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x49, 0x0a, 0x0b, 0x50, 0x75,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x4d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x56, 0x4d, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x66, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x39, 0x0a,
	0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x31, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x59, 0x0a,
	0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x32, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x33, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x54, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x4d, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x56, 0x4d, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x3d, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x50, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x22, 0x2f, 0x0a, 0x13, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0x94, 0x05, 0x0a,
	0x04, 0x53, 0x44, 0x46, 0x53, 0x12, 0x38, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x15, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x33, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f,
	0x6d, 0x70, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x07, 0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x63, 0x73, 0x34,
	0x32, 0x35, 0x5f, 0x6d, 0x70, 0x33, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x33, 0x2e, 0x50, 0x75,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x27, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x33, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x73,
	0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x33, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x63, 0x73, 0x34, 0x32,
	0x35, 0x5f, 0x6d, 0x70, 0x33, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x1f, 0x2e, 0x63, 0x73, 0x34, 0x32,
	0x35, 0x5f, 0x6d, 0x70, 0x33, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x20, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x33, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x1a, 0x21, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x33, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f,
	0x6d, 0x70, 0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x73, 0x34, 0x32,
	0x35, 0x5f, 0x6d, 0x70, 0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0e,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x20,
	0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x33, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x33,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x73, 0x34, 0x32, 0x35, 0x5f, 0x6d, 0x70, 0x33, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mp3_SDFS_proto_rawDescOnce sync.Once
	file_mp3_SDFS_proto_rawDescData = file_mp3_SDFS_proto_rawDesc
)

func file_mp3_SDFS_proto_rawDescGZIP() []byte {
	file_mp3_SDFS_proto_rawDescOnce.Do(func() {
		file_mp3_SDFS_proto_rawDescData = protoimpl.X.CompressGZIP(file_mp3_SDFS_proto_rawDescData)
	})
	return file_mp3_SDFS_proto_rawDescData
}

var file_mp3_SDFS_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_mp3_SDFS_proto_goTypes = []interface{}{
	(*GetRequest)(nil),                    // 0: cs425_mp3.GetRequest
	(*GetResponse)(nil),                   // 1: cs425_mp3.GetResponse
	(*PutRequest)(nil),                    // 2: cs425_mp3.PutRequest
	(*PutResponse)(nil),                   // 3: cs425_mp3.PutResponse
	(*UpdateLeaderFileTableRequest)(nil),  // 4: cs425_mp3.UpdateLeaderFileTableRequest
	(*UpdateLeaderFileTableResponse)(nil), // 5: cs425_mp3.UpdateLeaderFileTableResponse
	(*DeleteRequestLeader)(nil),           // 6: cs425_mp3.DeleteRequestLeader
	(*DeleteResponseLeader)(nil),          // 7: cs425_mp3.DeleteResponseLeader
	(*DeleteRequestFollower)(nil),         // 8: cs425_mp3.DeleteRequestFollower
	(*DeleteResponseFollower)(nil),        // 9: cs425_mp3.DeleteResponseFollower
	(*ListFileHolderRequest)(nil),         // 10: cs425_mp3.ListFileHolderRequest
	(*ListFileHolderResponse)(nil),        // 11: cs425_mp3.ListFileHolderResponse
	(*ListLocalFilesRequest)(nil),         // 12: cs425_mp3.ListLocalFilesRequest
	(*ListLocalFilesResponse)(nil),        // 13: cs425_mp3.ListLocalFilesResponse
	(*ReplicationRequest)(nil),            // 14: cs425_mp3.ReplicationRequest
	(*ReplicationResponse)(nil),           // 15: cs425_mp3.ReplicationResponse
}
var file_mp3_SDFS_proto_depIdxs = []int32{
	0,  // 0: cs425_mp3.SDFS.GetFile:input_type -> cs425_mp3.GetRequest
	2,  // 1: cs425_mp3.SDFS.PutFile:input_type -> cs425_mp3.PutRequest
	4,  // 2: cs425_mp3.SDFS.UpdateLeaderFileTable:input_type -> cs425_mp3.UpdateLeaderFileTableRequest
	6,  // 3: cs425_mp3.SDFS.DeleteFileLeader:input_type -> cs425_mp3.DeleteRequestLeader
	8,  // 4: cs425_mp3.SDFS.DeleteFileFollower:input_type -> cs425_mp3.DeleteRequestFollower
	10, // 5: cs425_mp3.SDFS.ListFileHolder:input_type -> cs425_mp3.ListFileHolderRequest
	12, // 6: cs425_mp3.SDFS.ListLocalFiles:input_type -> cs425_mp3.ListLocalFilesRequest
	14, // 7: cs425_mp3.SDFS.ReplicateFile:input_type -> cs425_mp3.ReplicationRequest
	1,  // 8: cs425_mp3.SDFS.GetFile:output_type -> cs425_mp3.GetResponse
	3,  // 9: cs425_mp3.SDFS.PutFile:output_type -> cs425_mp3.PutResponse
	5,  // 10: cs425_mp3.SDFS.UpdateLeaderFileTable:output_type -> cs425_mp3.UpdateLeaderFileTableResponse
	7,  // 11: cs425_mp3.SDFS.DeleteFileLeader:output_type -> cs425_mp3.DeleteResponseLeader
	9,  // 12: cs425_mp3.SDFS.DeleteFileFollower:output_type -> cs425_mp3.DeleteResponseFollower
	11, // 13: cs425_mp3.SDFS.ListFileHolder:output_type -> cs425_mp3.ListFileHolderResponse
	13, // 14: cs425_mp3.SDFS.ListLocalFiles:output_type -> cs425_mp3.ListLocalFilesResponse
	15, // 15: cs425_mp3.SDFS.ReplicateFile:output_type -> cs425_mp3.ReplicationResponse
	8,  // [8:16] is the sub-list for method output_type
	0,  // [0:8] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_mp3_SDFS_proto_init() }
func file_mp3_SDFS_proto_init() {
	if File_mp3_SDFS_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mp3_SDFS_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp3_SDFS_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp3_SDFS_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp3_SDFS_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp3_SDFS_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLeaderFileTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp3_SDFS_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLeaderFileTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp3_SDFS_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequestLeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp3_SDFS_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponseLeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp3_SDFS_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequestFollower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp3_SDFS_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponseFollower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp3_SDFS_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFileHolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp3_SDFS_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFileHolderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp3_SDFS_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLocalFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp3_SDFS_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLocalFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp3_SDFS_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mp3_SDFS_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mp3_SDFS_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mp3_SDFS_proto_goTypes,
		DependencyIndexes: file_mp3_SDFS_proto_depIdxs,
		MessageInfos:      file_mp3_SDFS_proto_msgTypes,
	}.Build()
	File_mp3_SDFS_proto = out.File
	file_mp3_SDFS_proto_rawDesc = nil
	file_mp3_SDFS_proto_goTypes = nil
	file_mp3_SDFS_proto_depIdxs = nil
}
